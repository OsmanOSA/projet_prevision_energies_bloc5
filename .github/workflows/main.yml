name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR
          
          # Trim whitespace from variables
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | xargs)
          
          echo "Building Docker image..."
          echo "ECR_REGISTRY: '$ECR_REGISTRY'"
          echo "ECR_REPOSITORY: '$ECR_REPOSITORY'"
          echo "IMAGE_TAG: '$IMAGE_TAG'"
          
          # Verify that environment variables are set
          if [ -z "$ECR_REGISTRY" ]; then
            echo "Error: ECR_REGISTRY is not set or empty"
            exit 1
          fi
          
          if [ -z "$ECR_REPOSITORY" ]; then
            echo "Error: ECR_REPOSITORY is not set or empty"
            echo "Please check that the secret ECR_REPOSITORY_NAME is properly configured in GitHub"
            exit 1
          fi
          
          # Validate ECR repository name format
          if ! echo "$ECR_REPOSITORY" | grep -qE '^[a-z0-9][a-z0-9_/-]*$'; then
            echo "Error: ECR_REPOSITORY contains invalid characters: '$ECR_REPOSITORY'"
            echo "ECR repository names must be lowercase and can only contain alphanumeric characters, hyphens, underscores, and forward slashes"
            exit 1
          fi
          
          # Construct the full image name
          FULL_IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Full image name: '$FULL_IMAGE_NAME'"
          
          # Build Docker image
          echo "Building Docker image..."
          docker build -t "${FULL_IMAGE_NAME}" .
          
          # Push image to ECR
          echo "Pushing image to ECR..."
          docker push "${FULL_IMAGE_NAME}"
          
          # Set output for next steps
          echo "image=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "Setting output: image=${FULL_IMAGE_NAME}"

  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build image name from ECR login
        run: |
          # Récupérer le registry directement depuis le login ECR
          REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          REPOSITORY="${{ secrets.ECR_REPOSITORY_NAME }}"
          
          # Nettoyer les espaces et caractères indésirables
          REGISTRY=$(echo "$REGISTRY" | xargs | tr -d '\r\n' | tr -d ' ')
          REPOSITORY=$(echo "$REPOSITORY" | xargs | tr -d '\r\n' | tr -d ' ')
          
          echo "Registry (cleaned): '$REGISTRY'"
          echo "Repository (cleaned): '$REPOSITORY'"
          
          # Vérifier que les variables sont définies
          if [ -z "$REGISTRY" ]; then
            echo "Error: ECR Registry is empty. ECR login may have failed."
            exit 1
          fi
          
          if [ -z "$REPOSITORY" ]; then
            echo "Error: ECR_REPOSITORY_NAME secret is empty"
            echo "Please check that ECR_REPOSITORY_NAME is configured in GitHub secrets"
            exit 1
          fi
          
          # Construire le nom complet de l'image (sans espaces)
          FULL_IMAGE_NAME="${REGISTRY}/${REPOSITORY}:latest"
          echo "Full image name: '$FULL_IMAGE_NAME'"
          
          # Vérifier qu'il n'y a pas d'espaces dans le nom final
          if echo "$FULL_IMAGE_NAME" | grep -q ' '; then
            echo "Error: Image name contains spaces: '$FULL_IMAGE_NAME'"
            exit 1
          fi
          
          # Sauvegarder pour les étapes suivantes
          echo "FINAL_IMAGE_NAME=$FULL_IMAGE_NAME" >> $GITHUB_ENV
      
      - name: Pull latest images
        run: |
          echo "Attempting to pull: '$FINAL_IMAGE_NAME'"
          # Vérifier encore une fois qu'il n'y a pas d'espaces
          if echo "$FINAL_IMAGE_NAME" | grep -q ' '; then
            echo "Error: Image name contains spaces"
            exit 1
          fi
          docker pull "$FINAL_IMAGE_NAME"
         
      - name: Stop and remove container if running
        run: |
          if docker ps -q --filter "name=networksecurity" | grep -q .; then
            echo "Stopping existing container..."
            docker stop networksecurity
            docker rm -f networksecurity
          else
            echo "No existing container to stop"
          fi
       
      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 \
            --ipc="host" \
            --name=networksecurity \
            -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e "AWS_REGION=${{ secrets.AWS_REGION }}" \
            "$FINAL_IMAGE_NAME"
            
      - name: Clean previous images and containers
        run: |
          docker system prune -f