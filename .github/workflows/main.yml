name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          
          # Trim whitespace from variables
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | xargs)
          
          echo "Building Docker image..."
          echo "ECR_REGISTRY: '$ECR_REGISTRY'"
          echo "ECR_REPOSITORY: '$ECR_REPOSITORY'"
          echo "IMAGE_TAG: '$IMAGE_TAG'"
          
          # Verify that environment variables are set
          if [ -z "$ECR_REGISTRY" ]; then
            echo "Error: ECR_REGISTRY is not set or empty"
            exit 1
          fi
          
          if [ -z "$ECR_REPOSITORY" ]; then
            echo "Error: ECR_REPOSITORY is not set or empty"
            echo "Please check that the secret ECR_REPOSITORY_NAME is properly configured in GitHub"
            exit 1
          fi
          
          # Validate ECR repository name format (lowercase, alphanumeric, hyphens, underscores)
          if ! echo "$ECR_REPOSITORY" | grep -qE '^[a-z0-9][a-z0-9_/-]*$'; then
            echo "Error: ECR_REPOSITORY contains invalid characters: '$ECR_REPOSITORY'"
            echo "ECR repository names must be lowercase and can only contain alphanumeric characters, hyphens, underscores, and forward slashes"
            exit 1
          fi
          
          # Construct the full image name
          FULL_IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Full image name: '$FULL_IMAGE_NAME'"
          
          # Build Docker image
          echo "Building Docker image..."
          docker build -t "${FULL_IMAGE_NAME}" .
          
          # Push image to ECR
          echo "Pushing image to ECR..."
          docker push "${FULL_IMAGE_NAME}"
          
          # Set output for next steps
          echo "image=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT

  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Quick cleanup before deployment
        timeout-minutes: 2
        run: |
          echo "=== Quick cleanup before deployment ==="
          START_TIME=$(date +%s)
          
          # Quick disk check
          echo "Disk usage:"
          df -h / | head -2
          
          # Stop existing container if running (should be fast)
          if docker ps --format '{{.Names}}' | grep -q '^projet_prevision$'; then
            echo "Stopping existing container..."
            docker stop projet_prevision --time 10 || true
            docker rm -v projet_prevision || true
          fi
          
          # Only check if we really need to clean (less than 3GB free)
          AVAILABLE_GB=$(df / | awk 'NR==2 {print int($4/1024/1024)}')
          echo "Available space: ${AVAILABLE_GB}GB"
          
          if [ "$AVAILABLE_GB" -lt 3 ]; then
            echo "Low disk space detected, performing cleanup..."
            
            # Quick prune of stopped containers and dangling images only
            docker container prune -f || true
            docker image prune -f || true
            
            # If still low, remove old images from the same repo
            if [ "$AVAILABLE_GB" -lt 2 ]; then
              echo "Very low space, removing old application images..."
              docker images | grep "${{ secrets.ECR_REPOSITORY_NAME }}" | awk '{if(NR>1)print $3}' | xargs -r docker rmi -f 2>/dev/null || true
            fi
          else
            echo "Sufficient disk space available, skipping cleanup"
          fi
          
          END_TIME=$(date +%s)
          echo "Cleanup completed in $((END_TIME - START_TIME)) seconds"
      
      - name: Pull latest image from ECR
        timeout-minutes: 5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          START_TIME=$(date +%s)
          
          # Trim whitespace from variables
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | xargs)
          
          # Verify that environment variables are set
          if [ -z "$ECR_REGISTRY" ] || [ -z "$ECR_REPOSITORY" ]; then
            echo "Error: ECR_REGISTRY or ECR_REPOSITORY is not set"
            exit 1
          fi
          
          # Construct the full image name
          FULL_IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Pulling image: $FULL_IMAGE_NAME"
          
          # Check if image already exists locally
          if docker image inspect "${FULL_IMAGE_NAME}" >/dev/null 2>&1; then
            echo "Image exists locally, checking for updates..."
            # Try to pull, but don't fail if unchanged
            docker pull "${FULL_IMAGE_NAME}" || echo "Image is up-to-date"
          else
            echo "Image not found locally, pulling from ECR..."
            docker pull "${FULL_IMAGE_NAME}"
          fi
          
          END_TIME=$(date +%s)
          echo "Pull completed in $((END_TIME - START_TIME)) seconds"
       
      - name: Run Docker Image to serve users
        timeout-minutes: 2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          START_TIME=$(date +%s)
          
          # Trim whitespace from variables
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | xargs)
          
          # Construct the full image name
          FULL_IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          
          echo "Starting container..."
          
          # Run the container
          docker run -d \
            -p 8080:8080 \
            --name=projet_prevision \
            --restart unless-stopped \
            -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e "AWS_REGION=${{ secrets.AWS_REGION }}" \
            "${FULL_IMAGE_NAME}"
          
          # Quick health check
          sleep 2
          if docker ps | grep -q projet_prevision; then
            echo "Container started successfully"
            docker logs projet_prevision --tail 10
          else
            echo "Failed to start container"
            docker logs projet_prevision
            exit 1
          fi
          
          END_TIME=$(date +%s)
          echo "Container started in $((END_TIME - START_TIME)) seconds"
          
      - name: Optional post-deployment cleanup
        timeout-minutes: 1
        continue-on-error: true
        run: |
          echo "=== Quick post-deployment cleanup ==="
          
          # Only clean if really needed (less than 2GB free)
          AVAILABLE_GB=$(df / | awk 'NR==2 {print int($4/1024/1024)}')
          
          if [ "$AVAILABLE_GB" -lt 2 ]; then
            echo "Low space (${AVAILABLE_GB}GB), cleaning old images..."
            # Quick cleanup of dangling resources only
            docker image prune -f || true
            docker container prune -f || true
          else
            echo "Sufficient space (${AVAILABLE_GB}GB), skipping cleanup"
          fi
          
          echo "Deployment completed! Disk usage: $(df -h / | awk 'NR==2 {print $4}') free"