name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          
          # Trim whitespace from variables
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | xargs)
          
          echo "Building Docker image..."
          echo "ECR_REGISTRY: '$ECR_REGISTRY'"
          echo "ECR_REPOSITORY: '$ECR_REPOSITORY'"
          echo "IMAGE_TAG: '$IMAGE_TAG'"
          
          # Verify that environment variables are set
          if [ -z "$ECR_REGISTRY" ]; then
            echo "Error: ECR_REGISTRY is not set or empty"
            exit 1
          fi
          
          if [ -z "$ECR_REPOSITORY" ]; then
            echo "Error: ECR_REPOSITORY is not set or empty"
            echo "Please check that the secret ECR_REPOSITORY_NAME is properly configured in GitHub"
            exit 1
          fi
          
          # Validate ECR repository name format (lowercase, alphanumeric, hyphens, underscores)
          if ! echo "$ECR_REPOSITORY" | grep -qE '^[a-z0-9][a-z0-9_/-]*$'; then
            echo "Error: ECR_REPOSITORY contains invalid characters: '$ECR_REPOSITORY'"
            echo "ECR repository names must be lowercase and can only contain alphanumeric characters, hyphens, underscores, and forward slashes"
            exit 1
          fi
          
          # Construct the full image name
          FULL_IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Full image name: '$FULL_IMAGE_NAME'"
          
          # Build Docker image
          echo "Building Docker image..."
          docker build -t "${FULL_IMAGE_NAME}" .
          
          # Push image to ECR
          echo "Pushing image to ECR..."
          docker push "${FULL_IMAGE_NAME}"
          
          # Set output for next steps
          echo "image=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT

  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Clean up Docker space before deployment
        run: |
          echo "=== Cleaning up Docker space before deployment ==="
          echo "Disk usage before cleanup:"
          df -h /
          df -h /var/lib/docker || true
          
          # Stop and remove the existing container if it exists
          if docker ps -a --format '{{.Names}}' | grep -q '^projet_prevision$'; then
            echo "Stopping and removing existing container..."
            docker stop projet_prevision || true
            docker rm -v projet_prevision || true
          fi
          
          # Remove all stopped containers with their volumes
          echo "Removing stopped containers..."
          docker container prune -f || true
          
          # Remove unused images (keeping only the last few)
          echo "Removing unused images..."
          docker image prune -a -f --filter "until=24h" || true
          
          # Remove ALL dangling images
          echo "Removing dangling images..."
          docker rmi $(docker images -f "dangling=true" -q) 2>/dev/null || true
          
          # Remove unused volumes
          echo "Removing unused volumes..."
          docker volume prune -f || true
          
          # Remove unused networks
          echo "Removing unused networks..."
          docker network prune -f || true
          
          # Remove build cache
          echo "Removing build cache..."
          docker builder prune -a -f || true
          
          # Aggressive cleanup if still low on space (less than 5GB free)
          AVAILABLE_SPACE=$(df / | awk 'NR==2 {print $4}')
          if [ "$AVAILABLE_SPACE" -lt 5000000 ]; then
            echo "WARNING: Less than 5GB available, performing aggressive cleanup..."
            # Remove ALL images except the base Python image
            docker images | grep -v "python" | grep -v "REPOSITORY" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true
            # Full system prune
            docker system prune -a -f --volumes || true
          fi
          
          # Show disk usage after cleanup
          echo "Disk usage after cleanup:"
          df -h /
          df -h /var/lib/docker || true
          
          # Check Docker disk usage
          echo "Docker disk usage:"
          docker system df
      
      - name: Pull latest images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Trim whitespace from variables
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | xargs)
          
          echo "Pulling Docker image..."
          echo "ECR_REGISTRY: '$ECR_REGISTRY'"
          echo "ECR_REPOSITORY: '$ECR_REPOSITORY'"
          
          # Verify that environment variables are set
          if [ -z "$ECR_REGISTRY" ] || [ -z "$ECR_REPOSITORY" ]; then
            echo "Error: ECR_REGISTRY or ECR_REPOSITORY is not set"
            exit 1
          fi
          
          # Construct the full image name
          FULL_IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          echo "Full image name: '$FULL_IMAGE_NAME'"
          
          # Pull the image
          docker pull "${FULL_IMAGE_NAME}"
       
      - name: Run Docker Image to serve users
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Trim whitespace from variables
          ECR_REGISTRY=$(echo "$ECR_REGISTRY" | xargs)
          ECR_REPOSITORY=$(echo "$ECR_REPOSITORY" | xargs)
          IMAGE_TAG=$(echo "$IMAGE_TAG" | xargs)
          
          # Construct the full image name
          FULL_IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
          
          echo "Starting container with image: '$FULL_IMAGE_NAME'"
          
          # Run the container
          docker run -d \
            -p 8080:8080 \
            --ipc="host" \
            --name=projet_prevision \
            --restart unless-stopped \
            -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e "AWS_REGION=${{ secrets.AWS_REGION }}" \
            "${FULL_IMAGE_NAME}"
          
          # Verify container is running
          sleep 3
          if docker ps | grep -q projet_prevision; then
            echo "Container started successfully"
            docker logs projet_prevision --tail 20
          else
            echo "Failed to start container"
            docker logs projet_prevision
            exit 1
          fi
          
      - name: Clean previous images and containers
        run: |
          echo "=== Post-deployment cleanup ==="
          
          # Keep only the currently running image and remove old ones
          CURRENT_IMAGE=$(docker ps --filter "name=projet_prevision" --format "{{.Image}}")
          echo "Current running image: $CURRENT_IMAGE"
          
          # Remove old images from the same repository (keep only the latest)
          echo "Removing old versions of the application image..."
          docker images | grep "${{ secrets.ECR_REPOSITORY_NAME }}" | grep -v "$CURRENT_IMAGE" | awk '{print $3}' | xargs -r docker rmi -f 2>/dev/null || true
          
          # General cleanup
          echo "Cleaning up unused Docker resources..."
          docker system prune -f --volumes
          
          # Final disk usage report
          echo "Final disk usage:"
          df -h /
          docker system df